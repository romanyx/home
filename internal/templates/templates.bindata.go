// Code generated by go-bindata.
// sources:
// html/index.html
// html/layout.html
// html/meta.html
// html/og.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4d\xaf\x9b\x3c\x10\x85\xf7\xf9\x15\xf3\xb2\xb9\x9b\x04\x92\xe8\xad\xaa\x5b\x11\xd4\x76\xd3\x5e\xa9\x8b\x2a\xed\xbe\x32\x66\x02\x53\x8c\x8d\xec\x01\x6e\x84\xf8\xef\x95\xf9\xc8\x4d\x55\x45\xc9\x76\x3e\xce\xc3\x9c\x83\xe3\x02\x45\x86\x36\x59\x01\xc4\xc5\x2e\x39\x9a\x4a\x68\xf8\xdc\x64\x9a\x4a\xd3\x3e\x39\xe8\x30\x75\xc4\x18\x47\xc5\x6e\x9c\xc9\xa8\x05\xa9\x84\x73\x87\x40\x91\x2e\x5d\xe0\xab\x00\xb1\x80\xc2\xe2\xe9\x10\x14\xcc\xb5\xfb\x10\x45\x39\x71\xd1\xa4\xa1\x34\x55\x64\xbd\xe6\xf9\x35\x58\xf6\xa6\x56\x00\x2c\x6c\x8e\x7c\x08\x7e\xa5\x4a\xe8\x72\x16\x02\x98\xda\x93\x6a\x24\x6e\xc8\x57\x98\x51\x53\x8d\xf2\x1f\x67\xfd\xe7\xed\x85\xc0\x1d\x31\xa3\xbd\x89\x98\xb6\xef\x20\x66\x91\xeb\x13\x1e\x27\xcc\xfd\x3b\x88\xae\xeb\x42\xef\x22\x66\xa4\x47\x0e\xe9\x09\xb5\x49\xe7\x04\x36\xe2\xfd\xf6\xff\x54\xec\xf6\xbb\xe8\x61\xf6\xa2\xf8\x00\x9c\xb4\x63\x91\x5b\x51\x5d\x5f\xf9\xbc\x7d\x63\x5d\x06\x6e\xd2\x2e\x13\x77\x70\xb3\x78\x68\x9b\x48\xb6\x0f\xdf\x22\xdb\x6b\xd9\x38\xca\xa8\x4d\x56\x71\xb4\xfc\xb4\xb1\x43\xc9\x64\xf4\x22\x27\x8d\x66\xd4\x1c\x4c\xbf\xf3\x3e\xf9\x94\x9a\x86\xe3\xa8\xd8\x8f\x85\x7a\x19\xcb\xd0\x49\x4b\xb5\xdf\x9c\x49\x5f\x51\x29\x03\x5c\xa0\xc5\xff\xe0\xe5\xa9\x82\xbf\x1f\x42\x38\xd6\x04\x7c\x31\x4a\xe8\x1c\x52\x21\xcb\x0d\xea\x0c\x32\x6c\x51\x99\x1a\x2d\x74\xc4\x05\x54\xc6\x22\x70\x21\x34\xbc\x83\x33\x0a\xeb\xc0\x9c\x00\x5f\x6b\xb4\x84\x5a\x22\x90\xf6\xef\x69\xd9\xaa\x50\xf3\x1a\x4e\xc6\x56\x68\xe1\xd8\xa4\x67\x30\x1a\x8e\x82\x94\x83\x53\xa3\x14\x38\x16\xb2\x7c\x43\x84\xf0\x02\xa8\x7f\x9b\x33\xf8\x2b\x2d\xa5\x0d\x93\xce\x81\x0d\x98\x1a\x35\x38\xd3\x58\x89\x6b\x90\x67\xa9\x48\xe7\x6b\x28\x4c\x85\xa9\xc5\xce\x0f\x09\xff\xad\xe4\x98\x94\xef\x85\xa3\x95\xf5\x62\xd2\xf7\x26\x55\x24\x85\x77\xc3\x2d\x5e\xf5\x3d\x58\xa1\x73\x84\xf0\x07\x1b\x4b\xe8\x60\x18\xa6\x24\xea\xe4\x12\x6d\xdf\x43\xf8\x8d\x74\x09\xc3\xf0\x6f\x80\xbe\xf9\x93\x58\x21\x0c\x83\x8f\x6f\x06\xf6\x3d\x78\xe3\x86\x61\x15\x47\x73\x78\xc9\xea\x4f\x00\x00\x00\xff\xff\x56\x0e\x72\x7b\x85\x04\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 1157, mode: os.FileMode(420), modTime: time.Unix(1548156435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x39\x5f\x73\xa3\x38\xf2\xef\xf3\x29\xf4\x63\x7e\x2e\x27\x59\x20\x18\xec\x38\x81\x78\x6a\x6f\xe7\xf6\x6d\x72\x75\x55\x57\xb5\x2f\xb3\x53\x75\x02\x1a\xa3\x8d\x90\x38\x21\x62\x67\x28\xbe\xfb\x95\x10\x60\xc0\x78\x32\xb7\x57\xb7\xf7\x72\xb1\xc7\xd3\x7f\xa4\x6e\x75\xab\xd5\x74\x8b\xc7\x54\x66\xf4\xc3\x3b\x84\x1e\x53\xc0\xb1\x02\x10\xaa\x2a\x64\x3f\x81\xc4\xf6\x47\xce\x24\x30\x89\xea\xba\xa1\x3f\x16\xf2\x95\x82\x1e\xa3\xfe\xd4\xd4\x2a\xe1\x4c\x5a\x05\xf9\x0a\xfe\xca\xcd\x8f\xf5\x4d\x15\xf2\xa3\xc2\x09\xdb\xfb\x21\x17\x31\x08\x2b\xe4\xc7\x40\xc2\x51\x5a\x02\x58\x0c\x42\x71\xf6\xc0\x33\x90\x82\x44\x7f\x15\x10\x91\x82\x70\x56\xdb\x91\xd6\x56\x65\x58\xec\x09\xb3\x24\xcf\x7d\x77\x93\x1f\xff\x8f\x64\x39\x17\x12\x33\x59\x87\x3c\x7e\x1d\x2a\x14\x90\x05\x94\x30\xb0\x52\x20\xfb\x54\xfa\x2b\x7b\xa3\x48\x5a\x80\xef\x04\xcd\xd0\x04\x67\x84\xbe\xfa\x4f\xc0\x28\x37\x9f\x38\xc3\x11\x37\x3f\x95\x11\x89\x31\xfa\xc8\x59\xc1\x29\x98\x9f\x48\x08\x02\x4b\xc2\x19\x7a\xe2\x8c\x9b\x7f\x86\xdf\xf0\x2f\x25\xfa\x1b\x66\x85\x26\xfc\x44\x64\x21\x05\xe0\x0c\xfd\x02\x02\x0f\x18\x1f\x79\x29\x08\x08\xf4\x17\x38\x98\x19\x67\xbc\xc8\x71\x04\x66\x01\x82\x24\xc1\x81\x8b\xd8\x3a\x08\x9c\xfb\xa1\x00\xfc\x6c\x29\xbc\x4e\x57\x66\xea\x9a\xa9\x67\xa6\x6b\x33\xdd\x98\xe9\x5d\x35\x36\xc0\x83\xac\x4e\x08\xd0\xb8\x00\x59\x69\xff\xf9\x8c\x33\x08\x72\x1c\xc7\xca\x73\x4e\x6f\x5e\x9d\x0b\xa8\x3a\xb2\x3b\x30\x7c\x65\x6f\x95\x1f\x90\x13\x84\x38\x7a\xde\x0b\x5e\xb2\xd8\x8a\x38\xe5\xc2\x7f\x9f\x3c\xa8\x4f\xd0\x4a\x5e\xe5\x47\x54\x70\x4a\x62\xf4\x3e\x8a\xa2\x80\xbf\x80\x48\x28\x3f\xf8\xb8\x94\xbc\x8e\x78\x0c\x9f\x23\x8a\x8b\xe2\x66\x47\x31\xdb\x97\x78\x0f\xd6\x17\x33\x17\x17\xa8\x48\x4d\xd0\xdb\x73\x68\xcd\x71\x1c\xbd\xf1\x45\x8a\x63\x7e\xd0\x86\x4c\x17\x59\xe3\x2a\x2a\x45\xc1\x85\x9f\x73\xc2\x24\x88\x40\x2f\x55\xec\xc3\xab\xed\x83\xf9\xe0\x98\xae\xb7\xb9\xd6\x72\x62\x88\xb8\xde\x28\x2d\xab\xc6\x7e\xaa\x16\x5d\x9d\x19\x3a\x99\xdd\x59\xef\xa9\x4f\x6d\xa7\x38\x7a\x36\x9b\x5f\x14\x52\x1e\x3d\xff\xa3\xe4\x12\x5a\x82\xb2\xa2\x05\x21\x6b\x81\x74\xd5\x01\x6e\x07\x78\x1d\xb0\xee\x80\x4d\x07\xdc\xb5\x40\x21\x05\x67\xfb\x69\xc0\x6a\x54\x9d\x24\x9f\x71\x91\x61\xfa\xdf\x0d\xd3\xfa\x5f\x70\x43\x6b\xd0\x30\x62\x5d\x27\x3f\x7e\x87\x88\x84\x73\x09\xe2\xdf\xf2\xa6\xca\x4f\xbd\x08\x4a\x5a\x80\xd3\x16\xc8\xbb\x35\x42\xa4\x3c\xd4\x62\x25\xad\x12\xca\xb1\x1c\x85\x9e\x73\x3a\x4c\x97\x96\xde\x2f\xf1\x4c\x7e\x49\x47\x09\xca\xc9\x8f\xad\x58\x2b\xe4\x52\xf2\xcc\xf7\x4e\x1e\x49\x57\x55\xce\x0b\xd2\xc4\xab\x00\x8a\x25\x79\x81\x20\x26\x45\x4e\xf1\xab\x4f\x58\xe3\xc7\x46\x75\x4f\x94\x38\xa4\x60\x45\x40\x69\xbf\x46\xa5\x02\x39\xc8\x3b\x69\xf2\x9d\xd3\x49\x4d\x49\x1c\x03\xeb\xf5\xf9\x38\x91\x20\xaa\x36\x95\xfa\xc6\xee\x0f\xf8\x33\x82\xde\x48\x1c\x16\x9c\x96\x12\x82\xd6\x17\x2b\xb5\x68\x0a\x89\xec\x3d\x9d\xae\x7e\xb8\x19\x3a\xb0\xa7\x7f\x57\x28\xcc\xb8\x73\xec\xfc\x36\xab\xf4\x42\xfd\x10\x12\x2e\xfa\x5d\xf5\x26\xf8\x7a\x82\x6f\x26\xf8\x5d\x8b\x57\xe3\x4d\x9b\x8a\x3f\xf9\xfb\xfd\x7b\x64\xd4\x13\x65\x43\xee\x80\xbd\x9e\x63\x0f\xf8\x9b\x59\xfe\x60\xc0\xdd\xfc\x80\xd3\x08\x4a\xbe\x11\x7e\x3a\xee\xda\x20\xb3\x9a\x3d\x1a\x9c\x65\x4a\xda\x48\x3a\xdf\xda\x66\xd7\xc6\x9b\x5a\xd2\x0f\xfd\x84\x7e\x31\x56\xb7\x0c\x4e\xab\x88\x97\x2a\xb3\x5b\x02\x0a\x90\x3e\xee\x19\xe7\xd3\xda\x91\x57\xf8\x1a\x19\xb6\x11\x74\x13\x09\x8b\x04\x64\x6a\x00\x3e\x3b\xb2\x33\x46\x8e\xcc\x5a\x6d\xf3\xe3\xc4\xd0\x28\xbd\x70\x82\x4e\x52\xa7\xe6\x7c\xf8\xf5\x4f\xff\xfb\x7e\xd7\xd7\x08\x0e\x29\x91\x60\x35\x0f\x19\x3f\x17\x30\x93\x1f\x86\x41\x14\x5c\x78\x9e\x40\xa6\xf7\xa0\x7f\x0a\x9d\xc5\xfb\x8d\x11\xcc\x1e\xcc\xae\x18\x19\xcd\xef\x89\x13\x29\xcb\x65\x7d\x7a\x5c\x8d\xca\x97\xad\xe3\x0c\x58\x23\x61\x73\x82\x8c\xbf\x5f\x58\x4e\x2a\x66\x42\x74\x60\xef\x34\x16\xbb\xea\xac\x2f\xf5\xf4\x23\xa0\x97\x76\x76\xd2\xfe\x80\xbf\xb9\x24\xff\xcd\x4d\x0c\x0e\x24\x96\xa9\x2a\x01\x17\xf3\x95\xf0\x8f\x56\xc6\xbf\x5a\x31\x8f\x4a\x75\xae\x51\x29\xa8\x95\x0b\x48\xc8\xf1\xea\xba\xea\x1f\x9f\xa3\x6c\x55\x6b\x0f\x58\x9c\x41\x31\x9b\x3c\x8c\x95\x6d\xd4\x79\xd5\x3d\x25\x91\x83\xfa\xe7\x81\x1a\x82\x09\x03\x51\x65\xf8\x68\xe9\xb5\x6d\x9d\x31\xcb\x3c\x81\x56\x42\x4b\x12\x9f\x24\xa9\x82\xf8\x54\x35\xa0\x55\x33\x91\x30\x25\xaf\xa3\x0e\x68\xee\x71\x54\x97\xd7\x76\x5e\x52\xda\xa4\x9e\xb6\x1a\x51\x60\x4b\x15\xca\x63\x2d\xb9\x81\x6b\x3b\xc6\xe2\xb9\x9a\x54\xac\x8a\x66\x36\xbf\x2a\x90\xcf\xeb\xdd\xf7\x8e\x0a\xd6\x9e\x7f\xea\x16\x06\x3d\xc4\x89\xaf\x63\xbd\x9f\x19\x46\xf1\xba\x65\xa6\x2b\x84\x5b\x3d\xa9\x7b\x02\xbd\x13\xb8\x3e\x81\x1b\x84\x3b\x21\x51\x14\xb5\x12\x74\xd5\xd7\x80\x6d\xbd\x38\x6a\x3d\x06\xa3\xa6\xbd\x42\xcb\x6a\x6a\xa0\x73\xb9\x0d\x19\xc9\xd8\x1c\xa1\x69\xdb\x24\x75\x6e\x58\xaf\xd7\xe3\xf1\xaa\x67\x44\x32\xf6\x13\x22\x0a\x69\x45\x29\xa1\xf1\xec\x82\xec\x84\x8b\xcc\x52\x3e\xcd\x11\xc5\x21\xd0\xc1\x0a\x82\x91\x0e\xb1\x0f\xf1\xd5\xc3\xc6\xd4\x5f\x7b\x7b\x7f\x7d\x2e\x42\x83\xaa\x67\xc1\x02\xb0\x16\xd8\x06\xeb\xb7\xb6\x4e\x4f\x53\x51\x28\xf8\xef\x5e\x40\x3b\xdd\x4f\x78\x54\x16\x13\xf7\x28\x59\xe7\x9e\x6d\x97\x79\x49\x7b\x27\x3d\xc2\x22\xae\xbe\x73\x25\x6a\xac\xfe\xb5\x74\xe1\x7e\x6e\xb7\x14\x98\x15\x39\x16\xc0\x64\x70\x6e\x6a\x57\xd0\xf5\x1d\xea\x65\x5d\xa1\x64\xea\x9f\xb5\x4f\x79\x21\x1b\x28\x86\x04\x97\x54\x4e\x8c\xc7\xa1\xfa\x04\x23\xec\x4d\x19\xda\x8d\xe6\x9b\xc3\xda\x3e\x74\xa4\xf0\x21\x52\x9f\x60\x8c\x7d\xb5\x08\x8b\xe1\xe8\xaf\xfe\xa3\xaa\xc1\x51\x9f\x60\x84\x5d\x56\x98\x0b\x92\x61\xf1\xfa\x96\xc2\x6e\xd8\x9c\xc2\xbb\x75\xb8\x49\xee\x82\x11\x76\x59\x61\x51\x46\x11\x14\xc5\x5b\x0a\xbb\x61\x73\x0a\xef\x57\xd1\xf6\x7e\x1d\x8c\xb0\xcb\x0a\x09\x4b\xf8\x5b\xda\x9a\x31\x73\xaa\xd6\x71\xec\xc0\x2a\x18\x61\x97\x55\x81\x10\x5c\xbc\xa5\x4b\x0f\x9a\xdd\xb9\xcd\xd6\xdb\x7a\xc1\x08\xbb\xac\xec\x80\x05\x53\x89\xfe\x0d\x75\xdd\xb0\x39\x85\x49\x12\x6e\xd7\x71\x30\xc2\x3a\x85\xf8\x05\x4b\x2c\x52\x4e\x9b\xd6\x5b\xd3\x72\x8a\x23\xd0\xa4\x6f\x1f\xea\xb1\x1a\xcf\xeb\xcd\xc8\x80\x95\xfa\xd7\x22\x12\xb2\xdf\x91\xe8\x26\x12\x6c\x1c\xa9\xa2\xca\x9c\xe7\xb6\x56\xcf\xdd\x80\x0d\xf2\x62\xed\x0b\xce\x65\x65\x59\x45\x24\x00\x58\x73\x63\x63\x15\x19\xa6\xd4\xf7\x1c\xc8\xea\x1f\x9f\xe1\x35\x11\x38\x83\x02\x11\x95\x21\x2b\x67\x51\xf1\x1c\x47\x44\xbe\xfa\x4e\xad\xea\x9c\x1e\x5d\xd5\xb5\x1d\xd2\x52\x58\x65\x5e\x59\x07\x08\x9f\x89\xb4\x12\x42\x25\x08\x5f\x91\xaf\x36\xf9\xf1\x3a\x38\x23\x34\xae\xd3\x25\x96\xe6\xa1\xb5\xe3\x64\x85\x39\x96\xa0\x89\xbd\x7c\x9b\xe2\xaf\xaf\x94\xe3\x18\xe2\x59\x55\xce\x58\x91\x73\x5d\xdb\x59\x29\x21\x6e\xeb\x58\x3b\x05\x9a\xeb\x3b\x88\x6a\x94\x2b\xb6\x5d\xb9\x69\x0b\xc0\x71\xa6\xea\xdc\x71\xa7\xed\xda\xae\xaa\x6c\x04\x14\x39\x67\x05\x79\x01\x8b\x34\xde\xf9\x46\x37\xd6\xce\xdc\xdc\xd9\xee\x66\xd1\x53\xbb\x7b\xde\xae\x22\x76\x66\x84\xa2\xa9\xec\xf9\x1a\x74\x50\x72\xa6\x7d\x55\xb1\xa8\xdb\xc9\x5d\x55\x5d\x67\x98\x30\x53\xdf\x48\x55\x98\x91\x4c\x5f\x28\x36\x9b\x8a\x1c\xdb\x2b\x50\xc8\x65\x1a\xf4\x1c\x2b\x06\x55\x82\x3a\xf6\x6a\x53\xd4\x7a\x1a\x92\x24\x83\xcf\x31\x96\xa0\x80\xff\xdf\x19\x4f\xc6\x97\xb3\x76\xe0\x57\xd7\x59\x79\xbf\x3a\x8e\xeb\x18\xf5\x8f\x19\xc4\x04\x23\xce\xe8\x2b\xd2\xf1\x85\x30\x8b\xd1\xd5\xa9\x18\x55\x31\x76\x5d\x5d\x16\xdf\x97\xc2\x4d\x25\x57\x9f\x1a\x55\x14\x11\x09\x93\x42\x79\xc2\xf5\x67\xd7\xb6\x36\x6a\x5f\x62\xb1\x07\x39\x2d\x88\xda\x2b\x80\xd3\x5d\x97\xda\x14\xe5\xb5\x6a\x74\x29\xb5\x52\xbd\x1a\x61\x79\x29\xc7\x95\x43\x7b\xb4\x04\x8e\x49\x59\xf8\x33\xb7\xd0\xc3\x24\xd1\x05\x2d\xce\x73\xc0\x02\xb3\x08\xf4\x5d\x5d\xd3\x1d\x9c\x13\x8b\x29\x6d\x6e\x01\xa7\x1b\x57\xc2\x88\x24\x98\xd6\xe7\xd1\x3e\xbe\x95\xad\x19\x7e\x41\xb8\x4d\x23\x33\x25\x5a\x92\xb8\x70\x7f\x1f\x8c\xfd\x84\x3f\xab\xec\x92\x0b\x9e\xef\x8c\x52\x50\xe3\x4b\xef\xc7\xe4\xe1\xde\x71\xce\xf9\x73\x89\xa8\xc6\x9f\x53\x01\xc9\xcd\xce\xf0\x6f\x6f\x8d\x2f\x7e\xdb\x66\xe2\xcf\x02\xe8\xcd\xce\x80\xa3\x04\xc1\xb0\x16\xde\x6e\x1e\x32\x54\xb7\x74\x65\xc4\x58\x62\x9f\x64\x78\x0f\xb7\xc5\xcb\xfe\x87\x63\x46\xcd\x85\xf7\xb1\x78\xd9\x2f\x5c\xe7\x98\x51\x56\xec\x96\xa9\x94\xb9\x7f\x7b\x7b\x38\x1c\xec\x83\x67\x73\xb1\xbf\x75\x1d\xc7\x51\xc3\x97\x0b\xd7\x69\xae\xf1\x77\x4b\x62\x75\x5a\x14\xf1\x85\xc0\xe1\x27\x7e\xdc\x2d\x9d\x85\xeb\xa8\x7f\x9e\xdb\xfc\x28\x5e\x13\xaa\xbb\xe5\x6a\xad\x10\x7d\xc4\x3a\x2c\x21\x94\xee\x96\x6a\x47\x14\xa6\x2a\xff\x67\xd8\x2d\x17\xae\xa7\x5d\x77\x22\x5a\xaa\x53\x8c\x70\xbe\x5b\x36\x1e\x9e\x30\x7e\xe3\x84\x9d\x73\x5a\xbd\x0f\xb6\x77\xbf\x58\x2e\xbc\x9f\x17\xde\xc7\x1c\xcb\x74\xe1\x3a\xf1\x6e\xf9\xb4\x5a\x2f\x5c\xe7\x61\xe1\x3a\x9f\xbc\x16\x50\xff\xbb\x0a\x70\xc7\xd0\xea\x7e\xe1\x3a\x4f\xcd\xaf\x9a\xf3\xc9\xed\xa0\x06\x68\xe4\x3c\xf5\xb4\x4f\x0d\xbe\xba\x5f\xde\x6a\x8d\xca\x6b\x0b\xef\x67\xe3\xba\x4e\xc8\xbe\x14\x80\xe6\x77\xae\x67\x5e\xde\x40\xa3\x9e\xbe\x3a\xf3\xfa\x5b\x0f\xd5\xbd\x0d\x18\xdb\x9e\xd1\x84\x38\x6a\xa2\xdd\x1c\x52\xba\xea\x7d\x44\x0c\x4b\x29\xfb\x4b\x70\x4d\xd2\x4d\xcd\x24\xec\xb1\x90\x24\xa2\x80\x06\x91\x1a\x43\x11\x09\x92\xab\xcc\x67\x7c\x99\x26\xfd\xc1\x75\x77\x77\xfd\xdd\xcb\xd0\x75\x3e\x22\xd9\xbe\x1a\x24\xe2\x71\x32\x50\x76\xb6\xb9\x70\x94\x06\x09\xeb\x7a\xf2\xbb\xfb\xfc\x78\x5d\x4d\xfd\x73\xa9\x85\xdf\x34\x2d\x7c\xfd\x0e\xbd\xd3\x6f\x28\x6f\xfb\x57\x94\x8f\xb7\xdd\x0b\xcd\xc7\xa6\x05\xd4\xb1\x6e\x34\x0e\x69\xaa\x04\x95\xcf\x50\x2f\xd3\x38\xbd\xfa\x1c\xbd\xf5\x7c\xbc\x55\xb3\x3f\xbc\x7b\xbc\xd5\x2f\x4a\xff\x19\x00\x00\xff\xff\xc6\x30\x14\x27\x30\x1d\x00\x00")

func layoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutHtml,
		"layout.html",
	)
}

func layoutHtml() (*asset, error) {
	bytes, err := layoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.html", size: 7472, mode: os.FileMode(420), modTime: time.Unix(1525971961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metaHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x41\xca\xc2\x30\x10\x46\xf7\xff\x29\x86\xd9\xe7\xef\xb6\x60\x93\x8d\xe2\x09\xe2\x01\x42\x1d\x49\xa0\x49\x63\xfb\x55\x94\x92\xbb\x4b\x68\xb1\xbb\xe1\xcd\x9b\x37\x5d\x14\x38\xea\xbd\x9b\x66\x81\xe6\x9b\xbd\xaa\x96\xcd\xdf\x8e\xc7\x04\x49\xd0\x0c\x79\xa3\xf1\x88\xc3\xe9\xa7\x2e\x78\xa8\x96\xc9\x03\x59\xc9\x73\x09\x2f\xcd\xe7\x4d\x57\xf6\x93\xa5\x36\x10\x30\x88\x59\x57\xfa\xb7\x75\xa2\x52\xba\x66\x63\x7b\x3f\xb9\x28\x9a\xef\x32\xf7\x53\xc8\x08\x63\xe2\xe3\x65\x3d\xbb\x1c\x1b\x2a\x85\xcd\x37\x00\x00\xff\xff\x99\x36\xde\xb2\xad\x00\x00\x00")

func metaHtmlBytes() ([]byte, error) {
	return bindataRead(
		_metaHtml,
		"meta.html",
	)
}

func metaHtml() (*asset, error) {
	bytes, err := metaHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "meta.html", size: 173, mode: os.FileMode(420), modTime: time.Unix(1525701824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ogHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x4d\x2d\x49\x54\x28\x28\xca\x2f\x48\x2d\x2a\xa9\xb4\x55\xca\x4f\xb7\x2a\xc9\x2c\xc9\x49\x55\x52\x48\xce\xcf\x2b\x49\xcd\x2b\xb1\x55\xaa\xae\x56\xd0\x0b\x01\x89\x29\xd4\xd6\x2a\x29\xe8\xdb\x71\x61\xd3\x53\x59\x80\xa1\xa5\xb2\x00\x9f\x8e\x94\xd4\xe2\xe4\xa2\xcc\x82\x92\xcc\xfc\x3c\x34\x8d\x2e\x08\x19\x90\x7e\x7d\x3b\x40\x00\x00\x00\xff\xff\x04\x1e\x55\x03\xa4\x00\x00\x00")

func ogHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ogHtml,
		"og.html",
	)
}

func ogHtml() (*asset, error) {
	bytes, err := ogHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "og.html", size: 164, mode: os.FileMode(420), modTime: time.Unix(1525701824, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"layout.html": layoutHtml,
	"meta.html": metaHtml,
	"og.html": ogHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"layout.html": &bintree{layoutHtml, map[string]*bintree{}},
	"meta.html": &bintree{metaHtml, map[string]*bintree{}},
	"og.html": &bintree{ogHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

